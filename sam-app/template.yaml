AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for elasticsearch-on-spot

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
# Globals:
#   Function:
#     Timeout: 3



Parameters:


  VpcCidrBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: CIDR block of the new VPC where AWS Fargate will be placed
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18

  SubnetACidrBlock:
    Type: String
    Default: 192.168.0.0/20
    Description: CIDR block for subnet A of the AWS Fargate VPC
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."
    MinLength: 9
    MaxLength: 18

  SubnetBCidrBlock:
    Type: String
    Default: 192.168.16.0/20
    Description: CIDR block for subnet B of the AWS Fargate VPC
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

  SubnetCCidrBlock:
    Type: String
    Default: 192.168.32.0/20
    Description: CIDR block for subnet C of the AWS Fargate VPC
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

  EgressCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: The Cidir Block to restrict the ECS container outbound access
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(?:^$|(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))"
    ConstraintDescription: "must be a valid IP CIDR range of the form x.x.x.x/x."

  ElasticsearchClusterName:
    Type: String
    Default: "elasticsearchonspot"
    Description: The name of the elasticsearch cluster
    MinLength: 1
    MaxLength: 25
    ConstraintDescription: "must be a valid elasticsearch cluster name"

  HostedZone:
    Type: String
    Default: "elasticsearch"
    Description: The DNS name of the Amazon Route 53 hosted zone
    AllowedPattern: '(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)'
    ConstraintDescription: must be a valid DNS zone name.

  InitialResourceRecord:
    Type: String
    Default: "0.0.0.0"
    Description: The DNS value of the Amazon Route 53 record at initialization
    ConstraintDescription: must be a valid IP address.


Resources:

# ================================
#   Elasticsearch VPC
# ================================
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: SolutionId
          Value: SO0062
        -
          Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: True
      CidrBlock: !Ref SubnetACidrBlock
      AvailabilityZone:
        !Select
            - 0
            - !GetAZs
      VpcId: !Ref Vpc

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: True
      CidrBlock: !Ref SubnetBCidrBlock
      AvailabilityZone:
        !Select
            - 1
            - !GetAZs
      VpcId: !Ref Vpc

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: True
      CidrBlock: !Ref SubnetCCidrBlock
      AvailabilityZone:
        !Select
            - 2
            - !GetAZs
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MainRouteTable
      GatewayId: !Ref InternetGateway

  RouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PublicSubnetA

  RouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PublicSubnetB

  RouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PublicSubnetC

  ElasticSearchSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elasticsearch Data Node Security Group
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref EgressCidr
          Description: 'Allow All Outbound'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref VpcCidrBlock
          Description: 'Allow All from VPC CIDR'

  KibanaAndMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  Kibana and Master Node Security Group
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref EgressCidr
          Description: 'Allow All Outbound'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref VpcCidrBlock
          Description: 'Allow All from VPC CIDR'

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Elasticsearch Kibana ALB Security Group
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref EgressCidr
          Description: 'Allow All Outbound'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref VpcCidrBlock
          Description: 'Allow All from VPC CIDR'
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          Description: 'Allow All http from Anywhere'
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 9200
          ToPort: 9200
          Description: 'Allow All http on port 9200 from Anywhere'
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          Description: 'Allow All https from Anywhere'


# ================================
#   DNS Assets  
# ================================
  ElasticsearchDNSzone: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: 'My private hosted zone for elasticsearch.com'
      Name: !Ref HostedZone
      VPCs: 
        - 
          VPCId: !Ref Vpc
          VPCRegion: !Sub ${AWS::Region}
      HostedZoneTags: 
        - 
          Key: 'created by'
          Value: 'Elasticsearch on Spot project'

  FirstMasterDNSDNSRecord:
    DependsOn: ElasticsearchDNSzone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join 
        - ''
        - - !Ref HostedZone
          - .
      Comment: DNS name for the first master node.
      Name: !Join 
        - ''
        - - 'firstmaster'
          - .
          - !Ref HostedZone
          - .
      Type: A
      TTL: '30'
      ResourceRecords:
        - !Ref InitialResourceRecord

  ElasticsearchclusterNameDNSRecord:
    DependsOn: ElasticsearchDNSzone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join 
        - ''
        - - !Ref HostedZone
          - .
      Comment: Elasticsearch cluster name.
      Name: !Join 
        - ''
        - - 'clustername'
          - .
          - !Ref HostedZone
          - .
      Type: TXT
      TTL: '30'
      ResourceRecords:
        - !Sub "\"${ElasticsearchClusterName}\""

  SingleMasterDNSDNSRecord:
    DependsOn: ElasticsearchDNSzone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join 
        - ''
        - - !Ref HostedZone
          - .
      Comment: DNS name for the first master node.
      Name: !Join 
        - ''
        - - 'singlemaster'
          - .
          - !Ref HostedZone
          - .
      Type: A
      TTL: '30'
      ResourceRecords:
        - !Ref InitialResourceRecord


# ================================
#   Load Balancing Assets  
# ================================
  KibanaALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      # LoadBalancerAttributes: 
        # - LoadBalancerAttribute
      # Name: String
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup
      # SubnetMappings: 
        # - !Ref PublicSubnetA
        # - !Ref PublicSubnetB
        # - !Ref PublicSubnetC
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      Type: application


  KibanaAndMasterNodeTargetGroup: 
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 5601
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '0'


  DataNodeTargetGroup: 
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 9200
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '0'

  # DataNodeLaunchTemplate: 
  #   Type: AWS::EC2::LaunchTemplate
  #   Properties: 
  #     LaunchTemplateData: 
  #       BlockDeviceMappings: 
  #         - BlockDeviceMapping
  #       CapacityReservationSpecification: 
  #         CapacityReservationSpecification
  #       CpuOptions: 
  #         CpuOptions
  #       CreditSpecification: 
  #         CreditSpecification
  #       DisableApiTermination: Boolean
  #       EbsOptimized: Boolean
  #       ElasticGpuSpecifications: 
  #         - ElasticGpuSpecification
  #       ElasticInferenceAccelerators: 
  #         - LaunchTemplateElasticInferenceAccelerator
  #       HibernationOptions: 
  #         HibernationOptions
  #       IamInstanceProfile: 
  #         IamInstanceProfile
  #       ImageId: String
  #       InstanceInitiatedShutdownBehavior: String
  #       InstanceMarketOptions: 
  #         InstanceMarketOptions
  #       InstanceType: String
  #       KernelId: String
  #       KeyName: String
  #       # LicenseSpecifications: 
  #       #   - LicenseSpecification
  #       # MetadataOptions: 
  #       #   MetadataOptions
  #       # Monitoring: 
  #       #   Monitoring
  #       # NetworkInterfaces: 
  #       #   - NetworkInterface
  #       # Placement: 
  #       #   Placement
  #       # RamDiskId: String
  #       SecurityGroupIds: 
  #         - !Ref ElasticSearchSecurityGroup
  #       # SecurityGroups: 
  #       #   - !Ref ElasticSearchSecurityGroup
  #       # TagSpecifications: 
  #       #   - TagSpecification
  #       UserData: String
  #     LaunchTemplateName: DataNodeLaunchTemplate

  ElasticsearchNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-ElasticsearchNode-policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  ElasticsearchNodeInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "ElasticsearchNodeRole"


# ================================
#   AMI & EC2 Pipeline and Artifacts  
# ================================
  BuildBucket:
    # DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
      Tags:
        -
          Key: created by
          Value: study gurus


  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-code-build-policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:ListImages
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetRepositoryPolicy
                  - logs:CreateLogStream
                Resource:
                  - !Sub ${EcrRepository.Arn}
              -
                Effect: Allow
                Action:
                  - ec2:*
                  - logs:*
                  - ecr:GetAuthorizationToken
                Resource: "*"
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                  - s3:PutObject
                Resource:
                    - !Sub ${BuildBucket.Arn}
                    - !Sub ${BuildBucket.Arn}/*


  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-code-pipeline-policy
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListBucketVersions
                  - s3:PutObject
                Resource:
                  - !Sub ${BuildBucket.Arn}
                  - !Sub ${BuildBucket.Arn}/*
              -
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub ${AMICodeBuild.Arn}
                  - !Sub ${ContainerCodeBuild.Arn}

# ================================
#   AMI Pipeline and Artifacts  
# ================================
  AMICodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref BuildBucket
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              ActionTypeId:
                Category: Source
                Provider: S3
                Owner: AWS
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref BuildBucket
                S3ObjectKey: ami.zip
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  !Ref AMICodeBuild

  AMICodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Builds Elasticsearch AMI (-Sid)
      TimeoutInMinutes: 20
      ServiceRole: !GetAtt CodeBuildRole.Arn
      EncryptionKey: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: hashicorp/packer
        EnvironmentVariables:
          -
            Name: REPOSITORY
            Value: !Sub ${EcrRepository}
          -
            Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}
      Source:
        Type: CODEPIPELINE
        Location: !Sub ${BuildBucket}/ami.zip
        BuildSpec: !Sub |
          version: 0.2
          phases:
              pre_build:
                commands:
                  - echo $REPOSITORY
                  - echo $REPOSITORY_URI
                  - echo $AWS_DEFAULT_REGION
              build:
                commands:
                  - cd ami
                  - sed "s/AWS_DEFAULT_REGION/$AWS_DEFAULT_REGION/g" -i awscli.conf
                  - packer build packer-template.json
              post_build:
                commands:
                  - ls -al
                  - cat awscli.conf




# ================================
#   ECR Pipeline and Artifacts  
# ================================
  ContainerCodePipeline:
    #wait for the container
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref BuildBucket
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Source
              ActionTypeId:
                Category: Source
                Provider: S3
                Owner: AWS
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref BuildBucket
                S3ObjectKey: fargateelasticsearch.zip
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:
                  !Ref ContainerCodeBuild

  ContainerCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Builds S3 load testing container
      TimeoutInMinutes: 20
      ServiceRole: !GetAtt CodeBuildRole.Arn
      EncryptionKey: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/docker:18.09.0
        EnvironmentVariables:
          -
            Name: REPOSITORY
            Value: !Sub ${EcrRepository}
          -
            Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
              pre_build:
                commands:
                  - echo $REPOSITORY
                  - echo $REPOSITORY_URI
                  - $(aws ecr get-login --region ${AWS::Region} --no-include-email)
              build:
                commands:
                  - pwd
                  - ls -al
                  - cd fargateelasticsearch
                  - docker build -t $REPOSITORY:latest .
                  - ls -al
                  - docker tag $REPOSITORY:latest $REPOSITORY_URI:latest
              post_build:
                commands:
                  - docker push $REPOSITORY_URI:latest

# ================================
#   Monitoring Elasticsearch ECS Fargate Resources  
# ================================
  EcrRepository:
    # stack delte will fail as the repo is not empty, so we retain the resource
    # DeletionPolicy: Retain
    Type: AWS::ECR::Repository

  EcsCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: !Sub ${AWS::StackName}-Elasticsearch
        Tags:
          -
            Key: Project
            Value: S3 Put LoadTest

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Single Instance Elasticsearch Task Security Group
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: !Ref EgressCidr
          Description: 'Allow All Outbound'
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: !Ref VpcCidrBlock
          Description: 'Allow All from VPC CIDR'
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          Description: 'Allow All on port 80 from Anywhere'


  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      ContainerDefinitions:
        -
          Essential: true
          Name: !Sub ${AWS::StackName}-load-tester
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:latest
          Memory: 2048
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EcsCloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "load-testing"

  EcsCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"




# ========================================================================
## Resources for LAMBDA TO CLEAN UP S3 BUCKETS 
# ========================================================================
  cleanupBucketOnDelete:
    DependsOn: cleanupBucketOnDeleteFunction
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: 
        Fn::GetAtt: 
          - "cleanupBucketOnDeleteFunction"
          - "Arn"
      BucketName: !Sub '${BuildBucket}'

  
  cleanupBucketOnDeleteFunction:
    DependsOn: BuildBucket
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Role: !GetAtt cleanupOnDeleteLambdaRole.Arn
      CodeUri: cleanupBucketOnDelete/
      Handler: cleanupBucketOnDelete.lambda_handler
      Runtime: python3.7
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          s3_bucket_name: !Ref BuildBucket
      Timeout: 30
      Description: cleanup Bucket on Delete Lambda function.

# -------------------------------------------------------

  cleanupEcrOnDelete:
      DependsOn: cleanupEcrOnDeleteFunction
      Type: Custom::cleanuprepository
      Properties:
          ServiceToken: 
              Fn::GetAtt: 
                - "cleanupEcrOnDeleteFunction"
                - "Arn"
          ECRRepositoryARN: !Sub '${EcrRepository.Arn}'

  cleanupEcrOnDeleteFunction:
      DependsOn: EcrRepository
      Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
      Properties:
          Role: !GetAtt cleanupOnDeleteLambdaRole.Arn
          CodeUri: cleanupEcrOnDelete/
          Handler: cleanupEcrOnDelete.lambda_handler
          Runtime: python3.7
          Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
              Variables:
                  repository_name: !Ref EcrRepository
                  registryId: !Ref AWS::AccountId
          Timeout: 30
          Description: Delete ECR repo Lambda function.

# -------------------------------------------------------

  cleanupOnDeleteLambdaRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                  - Action: ['sts:AssumeRole']
                    Effect: Allow
                    Principal:
                      Service: [lambda.amazonaws.com]

  cleanupOnDeleteLambdaRolePolicy: 
      Type: "AWS::IAM::Policy"
      Properties: 
          PolicyName: !Sub "${AWS::StackName}-cleanupOnDeleteLambdaRolePolicy"
          PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                  - Effect: "Allow"
                    Action: 
                          - "s3:*"
                          - "logs:*"
                          - "ecr:*"
                    Resource: "*"
                  - Effect: "Deny"
                    Action: 
                          - "s3:DeleteBucket"
                          - "ecr:delete-repository"
                    Resource: "*"
          Roles: 
              - Ref: "cleanupOnDeleteLambdaRole"





Outputs:
  BuildBucketARN:
    Description: "BuildBucket ARN"
    Value: !GetAtt BuildBucket.Arn



